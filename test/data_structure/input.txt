template <typename CostType>
std::vector<int> is_bipartite(
    const std::vector<std::vector<Edge<CostType>>>& graph) {
  const int n = graph.size();
  std::vector<int> color(n, -1);
  const std::function<bool(int, int)> dfs = [&graph, &color, &dfs](
      const int ver, const int c) -> bool {
    color[ver] = c;
    for (const Edge<CostType>& e : graph[ver]) {
      if (color[e.dst] == c || (color[e.dst] == -1 && !dfs(e.dst, c ^ 1))) {
        return false;
      }
    }
    return true;
  };
  for (int i = 0; i < n; ++i) {
    if (color[i] == -1 && !dfs(i, 0)) return std::vector<int>{};
  }
  return color;
}




std::vector<int> is_bipartite(const std::vector<std::vector<int>>& graph) {
  const int n = graph.size();
  std::vector<int> color(n, -1);
  const std::function<bool(int, int)> dfs = [&graph, &color, &dfs](
      const int ver, const int c) -> bool {
    color[ver] = c;
    for (const int e : graph[ver]) {
      if (color[e] == c || (color[e] == -1 && !dfs(e, c ^ 1))) return false;
    }
    return true;
  };
  for (int i = 0; i < n; ++i) {
    if (color[i] == -1 && !dfs(i, 0)) return std::vector<int>{};
  }
  return color;
}



二部グラフ直す
)`|
